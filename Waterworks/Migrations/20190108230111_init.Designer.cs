// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Waterworks.Data;

namespace Waterworks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190108230111_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pg_buffercache", "'pg_buffercache', '', ''")
                .HasAnnotation("Npgsql:PostgresExtension:pg_stat_statements", "'pg_stat_statements', '', ''")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", "'postgis', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.AdresKorespondencyjny", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("KodPocztowy")
                        .HasColumnName("kod_pocztowy")
                        .HasMaxLength(6);

                    b.Property<string>("Miejscowosc")
                        .HasColumnName("miejscowosc")
                        .HasMaxLength(40);

                    b.Property<string>("NrDomu")
                        .HasColumnName("nr_domu")
                        .HasMaxLength(5);

                    b.Property<string>("NrLokalu")
                        .HasColumnName("nr_lokalu")
                        .HasMaxLength(5);

                    b.Property<string>("Poczta")
                        .HasColumnName("poczta")
                        .HasMaxLength(20);

                    b.Property<string>("Ulica")
                        .HasColumnName("ulica")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("adres_korespondencyjny");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.AdresObiektu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnName("kod_pocztowy")
                        .HasMaxLength(6);

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnName("miejscowosc")
                        .HasMaxLength(40);

                    b.Property<string>("NrDomu")
                        .IsRequired()
                        .HasColumnName("nr_domu")
                        .HasMaxLength(5);

                    b.Property<string>("NrDzialki")
                        .IsRequired()
                        .HasColumnName("nr_dzialki")
                        .HasMaxLength(30);

                    b.Property<string>("NrLokalu")
                        .HasColumnName("nr_lokalu")
                        .HasMaxLength(5);

                    b.Property<int>("ObiektId")
                        .HasColumnName("obiekt_id");

                    b.Property<string>("Poczta")
                        .HasColumnName("poczta")
                        .HasMaxLength(20);

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnName("ulica")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("ObiektId");

                    b.ToTable("adres_obiektu");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.AktywnyOdbiorca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(20);

                    b.Property<string>("Email2")
                        .HasColumnName("email_2")
                        .HasMaxLength(20);

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnName("imie")
                        .HasMaxLength(40);

                    b.Property<int>("KlientIdKlienta")
                        .HasColumnName("klient_id_klienta");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnName("kod_pocztowy")
                        .HasMaxLength(6);

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnName("miejscowosc")
                        .HasMaxLength(40);

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnName("nazwisko")
                        .HasMaxLength(40);

                    b.Property<string>("NrDomu")
                        .IsRequired()
                        .HasColumnName("nr_domu")
                        .HasMaxLength(5);

                    b.Property<string>("NrLokalu")
                        .HasColumnName("nr_lokalu")
                        .HasMaxLength(5);

                    b.Property<string>("Poczta")
                        .IsRequired()
                        .HasColumnName("poczta")
                        .HasMaxLength(20);

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnName("telefon")
                        .HasMaxLength(15);

                    b.Property<string>("Telefon2")
                        .HasColumnName("telefon_2")
                        .HasMaxLength(15);

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnName("ulica")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("KlientIdKlienta");

                    b.ToTable("aktywny_odbiorca");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.CennikScieki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<float>("CenaZaM3")
                        .HasColumnName("cena_za_m3");

                    b.Property<string>("NazwaCennika")
                        .IsRequired()
                        .HasColumnName("nazwa_cennika")
                        .HasMaxLength(40);

                    b.Property<int>("RodzajKlientaId")
                        .HasColumnName("rodzaj_klienta_id");

                    b.Property<string>("TypCennika")
                        .IsRequired()
                        .HasColumnName("typ_cennika")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("RodzajKlientaId");

                    b.ToTable("cennik_scieki");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.CennikWoda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CenaZaM3")
                        .HasColumnName("cena_za_m3");

                    b.Property<string>("NazwaCennika")
                        .IsRequired()
                        .HasColumnName("nazwa_cennika")
                        .HasMaxLength(40);

                    b.Property<int>("RodzajKlientaId")
                        .HasColumnName("rodzaj_klienta_id");

                    b.Property<string>("TypCennika")
                        .IsRequired()
                        .HasColumnName("typ_cennika")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("RodzajKlientaId");

                    b.ToTable("cennik_woda");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.DaneKlienta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("AdresKorespondencyjnyId")
                        .HasColumnName("adres_korespondencyjny_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(20);

                    b.Property<string>("Email2")
                        .HasColumnName("email_2")
                        .HasMaxLength(20);

                    b.Property<int>("IdKlienta")
                        .HasColumnName("id_klienta");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnName("imie")
                        .HasMaxLength(40);

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnName("kod_pocztowy")
                        .HasMaxLength(6);

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnName("miejscowosc")
                        .HasMaxLength(40);

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnName("nazwisko")
                        .HasMaxLength(40);

                    b.Property<string>("NrDomu")
                        .IsRequired()
                        .HasColumnName("nr_domu")
                        .HasMaxLength(5);

                    b.Property<string>("NrLokalu")
                        .HasColumnName("nr_lokalu")
                        .HasMaxLength(5);

                    b.Property<string>("Poczta")
                        .IsRequired()
                        .HasColumnName("poczta")
                        .HasMaxLength(20);

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnName("telefon")
                        .HasMaxLength(15);

                    b.Property<string>("Telefon2")
                        .HasColumnName("telefon_2")
                        .HasMaxLength(15);

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnName("ulica")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("AdresKorespondencyjnyId");

                    b.HasIndex("IdKlienta");

                    b.ToTable("dane_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.IdentyfikatorPodatkowy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("KlientIdKlienta")
                        .HasColumnName("klient_id_klienta");

                    b.Property<string>("Krs")
                        .HasColumnName("krs")
                        .HasMaxLength(10);

                    b.Property<string>("Nip")
                        .HasColumnName("nip")
                        .HasMaxLength(12);

                    b.Property<string>("Pesel")
                        .HasColumnName("pesel")
                        .HasMaxLength(11);

                    b.Property<string>("Regon")
                        .HasColumnName("regon")
                        .HasMaxLength(9);

                    b.HasKey("Id");

                    b.HasIndex("KlientIdKlienta");

                    b.ToTable("identyfikator_podatkowy");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.Klasyfikatory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("NazwaKlasyfikatora")
                        .IsRequired()
                        .HasColumnName("nazwa_klasyfikatora")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("klasyfikatory");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.KlasyfikatoryObiektu", b =>
                {
                    b.Property<int>("ObiektId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("obiekt_id");

                    b.Property<int>("KlasyfikatoryId")
                        .HasColumnName("klasyfikatory_id");

                    b.Property<int>("WartosciKlasyfikatorowId")
                        .HasColumnName("wartosci_klasyfikatorow_id");

                    b.HasKey("ObiektId");

                    b.HasIndex("KlasyfikatoryId");

                    b.HasIndex("WartosciKlasyfikatorowId");

                    b.ToTable("klasyfikatory_obiektu");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.Klient", b =>
                {
                    b.Property<int>("IdKlienta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_klienta");

                    b.Property<bool>("CzyAktywny")
                        .HasColumnName("czy_aktywny");

                    b.Property<int>("RodzajKlientaId")
                        .HasColumnName("rodzaj_klienta_id");

                    b.HasKey("IdKlienta");

                    b.HasIndex("RodzajKlientaId");

                    b.ToTable("klient");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.NormyZuzyciaWody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("NazwaNormy")
                        .HasColumnName("nazwa_normy");

                    b.Property<string>("OpisNormy")
                        .IsRequired()
                        .HasColumnName("opis_normy")
                        .HasMaxLength(40);

                    b.Property<int>("RodzajKlientaId")
                        .HasColumnName("rodzaj_klienta_id");

                    b.Property<string>("TypNormy")
                        .IsRequired()
                        .HasColumnName("typ_normy")
                        .HasMaxLength(40);

                    b.Property<int>("ZuzycieDm3NaDobe")
                        .HasColumnName("zuzycie_dm3_na_dobe");

                    b.Property<float>("ZuzycieM3NaMiesiac")
                        .HasColumnName("zuzycie_m3_na_miesiac");

                    b.HasKey("Id");

                    b.HasIndex("RodzajKlientaId");

                    b.ToTable("normy_zuzycia_wody");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.Obiekt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("AktywnyOdbiorcaId")
                        .HasColumnName("aktywny_odbiorca_id");

                    b.Property<Point>("Geometria")
                        .HasColumnName("geometria");

                    b.Property<int?>("KlientIdKlienta")
                        .HasColumnName("klient_id_klienta");

                    b.Property<string>("SposobRozliczenia")
                        .IsRequired()
                        .HasColumnName("sposob_rozliczenia")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AktywnyOdbiorcaId");

                    b.HasIndex("KlientIdKlienta");

                    b.ToTable("obiekt");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.OplatyAbonamentoweScieki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnName("nazwa")
                        .HasMaxLength(30);

                    b.Property<string>("OkresRozliczeniowy")
                        .IsRequired()
                        .HasColumnName("okres_rozliczeniowy")
                        .HasMaxLength(40);

                    b.Property<float>("Oplata")
                        .HasColumnName("oplata");

                    b.Property<int>("RodzajKlientaId")
                        .HasColumnName("rodzaj_klienta_id");

                    b.Property<string>("TypCennika")
                        .IsRequired()
                        .HasColumnName("typ_cennika")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("RodzajKlientaId");

                    b.ToTable("oplaty_abonamentowe_scieki");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.OplatyAbonamentoweWoda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnName("nazwa")
                        .HasMaxLength(30);

                    b.Property<string>("OkresRozliczeniowy")
                        .IsRequired()
                        .HasColumnName("okres_rozliczeniowy")
                        .HasMaxLength(40);

                    b.Property<float>("Oplata")
                        .HasColumnName("oplata");

                    b.Property<int>("RodzajKlientaId")
                        .HasColumnName("rodzaj_klienta_id");

                    b.Property<string>("TypCennika")
                        .IsRequired()
                        .HasColumnName("typ_cennika")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("RodzajKlientaId");

                    b.ToTable("oplaty_abonamentowe_woda");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.RodzajKlienta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("TypKlienta")
                        .IsRequired()
                        .HasColumnName("typ_klienta")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.WartosciKlasyfikatorow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("KlasyfikatoryId")
                        .HasColumnName("klasyfikatory_id");

                    b.HasKey("Id");

                    b.HasIndex("KlasyfikatoryId");

                    b.ToTable("wartosci_klasyfikatorow");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.AdresObiektu", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.Obiekt", "Obiekt")
                        .WithMany("AdresObiektu")
                        .HasForeignKey("ObiektId")
                        .HasConstraintName("adres_obiektu_obiekt");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.AktywnyOdbiorca", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.Klient", "KlientIdKlientaNavigation")
                        .WithMany("AktywnyOdbiorca")
                        .HasForeignKey("KlientIdKlienta")
                        .HasConstraintName("aktywny_odbiorca_klient");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.CennikScieki", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.RodzajKlienta", "RodzajKlienta")
                        .WithMany("CennikScieki")
                        .HasForeignKey("RodzajKlientaId")
                        .HasConstraintName("cennik_scieki_rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.CennikWoda", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.RodzajKlienta", "RodzajKlienta")
                        .WithMany("CennikWoda")
                        .HasForeignKey("RodzajKlientaId")
                        .HasConstraintName("cennik_woda_rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.DaneKlienta", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.AdresKorespondencyjny", "AdresKorespondencyjny")
                        .WithMany("DaneKlienta")
                        .HasForeignKey("AdresKorespondencyjnyId")
                        .HasConstraintName("dane_klienta_adres_korespondencyjny");

                    b.HasOne("Waterworks.Models.Db.Waterworks.Klient", "IdKlientaNavigation")
                        .WithMany("DaneKlienta")
                        .HasForeignKey("IdKlienta")
                        .HasConstraintName("dane_klienta_klient");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.IdentyfikatorPodatkowy", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.Klient", "KlientIdKlientaNavigation")
                        .WithMany("IdentyfikatorPodatkowy")
                        .HasForeignKey("KlientIdKlienta")
                        .HasConstraintName("identyfikator_podatkowy_klient");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.KlasyfikatoryObiektu", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.Klasyfikatory", "Klasyfikatory")
                        .WithMany("KlasyfikatoryObiektu")
                        .HasForeignKey("KlasyfikatoryId")
                        .HasConstraintName("klasyfikatory_obiektu_klasyfikatory");

                    b.HasOne("Waterworks.Models.Db.Waterworks.Obiekt", "Obiekt")
                        .WithOne("KlasyfikatoryObiektu")
                        .HasForeignKey("Waterworks.Models.Db.Waterworks.KlasyfikatoryObiektu", "ObiektId")
                        .HasConstraintName("klasyfikatory_obiektu_obiekt");

                    b.HasOne("Waterworks.Models.Db.Waterworks.WartosciKlasyfikatorow", "WartosciKlasyfikatorow")
                        .WithMany("KlasyfikatoryObiektu")
                        .HasForeignKey("WartosciKlasyfikatorowId")
                        .HasConstraintName("klasyfikatory_obiektu_wartosci_klasyfikatorow");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.Klient", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.RodzajKlienta", "RodzajKlienta")
                        .WithMany("Klient")
                        .HasForeignKey("RodzajKlientaId")
                        .HasConstraintName("klient_rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.NormyZuzyciaWody", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.RodzajKlienta", "RodzajKlienta")
                        .WithMany("NormyZuzyciaWody")
                        .HasForeignKey("RodzajKlientaId")
                        .HasConstraintName("normy_zuzycia_wody_rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.Obiekt", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.AktywnyOdbiorca", "AktywnyOdbiorca")
                        .WithMany("Obiekt")
                        .HasForeignKey("AktywnyOdbiorcaId")
                        .HasConstraintName("obiekt_aktywny_odbiorca");

                    b.HasOne("Waterworks.Models.Db.Waterworks.Klient", "KlientIdKlientaNavigation")
                        .WithMany("Obiekt")
                        .HasForeignKey("KlientIdKlienta")
                        .HasConstraintName("obiekt_klient");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.OplatyAbonamentoweScieki", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.RodzajKlienta", "RodzajKlienta")
                        .WithMany("OplatyAbonamentoweScieki")
                        .HasForeignKey("RodzajKlientaId")
                        .HasConstraintName("oplaty_abonamentowe_scieki_rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.OplatyAbonamentoweWoda", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.RodzajKlienta", "RodzajKlienta")
                        .WithMany("OplatyAbonamentoweWoda")
                        .HasForeignKey("RodzajKlientaId")
                        .HasConstraintName("oplaty_abonamentowe_woda_rodzaj_klienta");
                });

            modelBuilder.Entity("Waterworks.Models.Db.Waterworks.WartosciKlasyfikatorow", b =>
                {
                    b.HasOne("Waterworks.Models.Db.Waterworks.Klasyfikatory", "Klasyfikatory")
                        .WithMany("WartosciKlasyfikatorow")
                        .HasForeignKey("KlasyfikatoryId")
                        .HasConstraintName("wartosci_klasyfikatorow_klasyfikatory");
                });
#pragma warning restore 612, 618
        }
    }
}
